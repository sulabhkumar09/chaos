{
  "chaoslib-version": "1.23.0",
  "platform": "macOS-10.15.7-x86_64-i386-64bit",
  "node": "Karans-MacBook-Pro.local",
  "experiment": {
    "title": "My flask app experiment",
    "description": "sample demo to determine resiliency in existing flask web app",
    "tags": [
      "python",
      "flask"
    ],
    "contributions": {
      "reliability": "high",
      "scalability": "high",
      "performance": "medium",
      "security": "none"
    },
    "steady-state-hypothesis": {
      "title": "Website is OK",
      "probes": [
        {
          "type": "probe",
          "name": "website must be up and running",
          "tolerance": 200,
          "provider": {
            "type": "http",
            "timeout": [
              3,
              5
            ],
            "url": "http://localhost:5002/",
            "method": "GET"
          }
        }
      ]
    },
    "method": [
      {
        "type": "probe",
        "name": "website must return 500",
        "tolerance": 500,
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/return-failure",
          "timeout": [
            3,
            5
          ],
          "method": "GET",
          "headers": {
            "x-proofdock-attack": "{'actions':[{'name':'fault','value':'Exception'}]}"
          }
        },
        "controls": [
          {
            "name": "proof-dock-attack",
            "provider": {
              "type": "python",
              "module": "proofdock.control"
            }
          }
        ]
      },
      {
        "type": "probe",
        "name": "website must return 200 with json response",
        "tolerance": {
          "type": "jsonpath",
          "path": "$.name",
          "expect": [
            "Karan"
          ],
          "target": "body"
        },
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/json-example",
          "timeout": [
            3,
            5
          ],
          "method": "GET",
          "expected_status": 200
        },
        "controls": [
          {
            "name": "200-json-response-check",
            "provider": {
              "type": "python",
              "module": "jsonresponse.control"
            }
          }
        ]
      }
    ],
    "rollbacks": [
      {
        "type": "action",
        "name": "website must return 200",
        "tolerance": 200,
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/return-failure",
          "timeout": [
            3,
            5
          ],
          "method": "GET"
        }
      }
    ],
    "dry": null
  },
  "start": "2021-11-09T11:00:06.749235",
  "status": "completed",
  "deviated": false,
  "steady_states": {
    "before": {
      "steady_state_met": true,
      "probes": [
        {
          "activity": {
            "type": "probe",
            "name": "website must be up and running",
            "tolerance": 200,
            "provider": {
              "type": "http",
              "timeout": [
                3,
                5
              ],
              "url": "http://localhost:5002/",
              "method": "GET"
            }
          },
          "output": {
            "status": 200,
            "headers": {
              "Content-Type": "text/html; charset=utf-8",
              "Content-Length": "13",
              "Server": "Werkzeug/2.0.2 Python/3.9.1",
              "Date": "Tue, 09 Nov 2021 11:00:08 GMT"
            },
            "body": "Website is ok"
          },
          "status": "succeeded",
          "start": "2021-11-09T11:00:06.752012",
          "end": "2021-11-09T11:00:08.869513",
          "duration": 2.117501,
          "tolerance_met": true
        }
      ]
    },
    "after": {
      "steady_state_met": true,
      "probes": [
        {
          "activity": {
            "type": "probe",
            "name": "website must be up and running",
            "tolerance": 200,
            "provider": {
              "type": "http",
              "timeout": [
                3,
                5
              ],
              "url": "http://localhost:5002/",
              "method": "GET"
            }
          },
          "output": {
            "status": 200,
            "headers": {
              "Content-Type": "text/html; charset=utf-8",
              "Content-Length": "13",
              "Server": "Werkzeug/2.0.2 Python/3.9.1",
              "Date": "Tue, 09 Nov 2021 11:00:08 GMT"
            },
            "body": "Website is ok"
          },
          "status": "succeeded",
          "start": "2021-11-09T11:00:08.953793",
          "end": "2021-11-09T11:00:08.992984",
          "duration": 0.039191,
          "tolerance_met": true
        }
      ]
    },
    "during": []
  },
  "run": [
    {
      "activity": {
        "type": "probe",
        "name": "website must return 500",
        "tolerance": 500,
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/return-failure",
          "timeout": [
            3,
            5
          ],
          "method": "GET",
          "headers": {
            "x-proofdock-attack": "{'actions':[{'name':'fault','value':'Exception'}]}"
          }
        },
        "controls": [
          {
            "name": "proof-dock-attack",
            "provider": {
              "type": "python",
              "module": "proofdock.control"
            }
          }
        ]
      },
      "output": {
        "status": 500,
        "headers": {
          "Content-Type": "text/html; charset=utf-8",
          "X-XSS-Protection": "0",
          "Connection": "close",
          "Server": "Werkzeug/2.0.2 Python/3.9.1",
          "Date": "Tue, 09 Nov 2021 11:00:08 GMT"
        },
        "body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application's state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 4465344464,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"kvvvsffNSwPKeVsraFIV\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-4465309584\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2091</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465309632\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2076</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465307760\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2073</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465344416\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1519</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>from_error_handler: bool = False,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465308096\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1540</em>,\n      in <code class=\"function\">finalize_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:internal:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>response = self.make_response(rv)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = self.process_response(response)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>request_finished.send(self, response=response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if not from_error_handler:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.logger.exception(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465309728\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1885</em>,\n      in <code class=\"function\">process_response</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>response = self.ensure_sync(func)(response)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>for name in chain(request.blueprints, (None,)):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if name in self.after_request_funcs:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>for func in reversed(self.after_request_funcs[name]):</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>response = self.ensure_sync(func)(response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if not self.session_interface.is_null_session(ctx.session):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.session_interface.save_session(self, ctx.session, response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return response</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465309776\">\n  <h4>File <cite class=\"filename\">\"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/pdchaos/middleware/contrib/flask/flask_middleware.py\"</cite>,\n      line <em class=\"line\">14</em>,\n      in <code class=\"function\">_after_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def _after_request(response):</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&quot;&quot;&quot;Runs after each request.</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>See: https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.after_request</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>attack = json.loads(request.headers.get(HEADER_ATTACK)) if (HEADER_ATTACK in request.headers) else None</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>attack_ctx = {ATTACK_KEY_ROUTE: request.path}</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>chaos.attack(attack, attack_ctx)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465307904\">\n  <h4>File <cite class=\"filename\">\"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py\"</cite>,\n      line <em class=\"line\">346</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), &#x27;surrogatepass&#x27;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw[&#x27;object_hook&#x27;] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465309872\">\n  <h4>File <cite class=\"filename\">\"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-4465309920\">\n  <h4>File <cite class=\"filename\">\"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 1519, in full_dispatch_request\n    return self.finalize_request(rv)\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 1540, in finalize_request\n    response = self.process_response(response)\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py&quot;, line 1885, in process_response\n    response = self.ensure_sync(func)(response)\n  File &quot;/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/pdchaos/middleware/contrib/flask/flask_middleware.py&quot;, line 14, in _after_request\n    attack = json.loads(request.headers.get(HEADER_ATTACK)) if (HEADER_ATTACK in request.headers) else None\n  File &quot;/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py&quot;, line 346, in loads\n    return _default_decoder.decode(s)\n  File &quot;/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\njson.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 1519, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 1540, in finalize_request\n    response = self.process_response(response)\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/flask/app.py\", line 1885, in process_response\n    response = self.ensure_sync(func)(response)\n  File \"/Users/admin/Desktop/karan/projects/python/chaos-toolkit-for-webapp/env/lib/python3.9/site-packages/pdchaos/middleware/contrib/flask/flask_middleware.py\", line 14, in _after_request\n    attack = json.loads(request.headers.get(HEADER_ATTACK)) if (HEADER_ATTACK in request.headers) else None\n  File \"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/local/Cellar/python@3.9/3.9.1_6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\njson.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\n\n-->\n"
      },
      "status": "succeeded",
      "start": "2021-11-09T11:00:08.872057",
      "end": "2021-11-09T11:00:08.930331",
      "duration": 0.058274
    },
    {
      "activity": {
        "type": "probe",
        "name": "website must return 200 with json response",
        "tolerance": {
          "type": "jsonpath",
          "path": "$.name",
          "expect": [
            "Karan"
          ],
          "target": "body"
        },
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/json-example",
          "timeout": [
            3,
            5
          ],
          "method": "GET",
          "expected_status": 200
        },
        "controls": [
          {
            "name": "200-json-response-check",
            "provider": {
              "type": "python",
              "module": "jsonresponse.control"
            }
          }
        ]
      },
      "output": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json",
          "Content-Length": "22",
          "Server": "Werkzeug/2.0.2 Python/3.9.1",
          "Date": "Tue, 09 Nov 2021 11:00:08 GMT"
        },
        "body": {
          "name": "Karan"
        }
      },
      "status": "succeeded",
      "start": "2021-11-09T11:00:08.931954",
      "end": "2021-11-09T11:00:08.952386",
      "duration": 0.020432
    }
  ],
  "rollbacks": [
    {
      "activity": {
        "type": "action",
        "name": "website must return 200",
        "tolerance": 200,
        "provider": {
          "type": "http",
          "url": "http://localhost:5002/return-failure",
          "timeout": [
            3,
            5
          ],
          "method": "GET"
        }
      },
      "output": {
        "status": 200,
        "headers": {
          "Content-Type": "text/html; charset=utf-8",
          "Content-Length": "25",
          "Server": "Werkzeug/2.0.2 Python/3.9.1",
          "Date": "Tue, 09 Nov 2021 11:00:09 GMT"
        },
        "body": "Return a failure response"
      },
      "status": "succeeded",
      "start": "2021-11-09T11:00:08.995444",
      "end": "2021-11-09T11:00:09.020616",
      "duration": 0.025172
    }
  ],
  "end": "2021-11-09T11:00:09.021074",
  "duration": 2.325561046600342
}